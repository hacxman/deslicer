#!/usr/bin/python
import json
import socket
import sys
import base64
import os
import time
import ssl

def recvupto(sock, c='\n'):
  data = ''
  while True:
    d = sock.recv(1)
    data += d
    if d == c or d == '':
       return data
  return data

def readupto(fd, c='\n'):
  data = ''
  while True:
    d = os.read(fd, 1)
    data += d
    if d == c:
       return data
  return data

def talkto(data, sock, apikey=None):
    if not apikey is None:
      data['key'] = apikey
    data = json.dumps(data)
    datalen = len(data)
    sock.sendall(str(datalen)+"\n")
    if datalen > 30000:
      cnt = 0
      while cnt != datalen:
        sz = 4096 if cnt < datalen - 4096 else datalen - cnt
        sock.sendall(data[cnt:cnt+sz])
        sys.stdout.write('U {}/{}B\r'.format(cnt, datalen))
        cnt += sz
      sys.stdout.write('\n')
    else:
      sock.sendall(data)


    # Receive data from the server and shut down
#    fd = sock.fileno()
    n = int(recvupto(sock).strip())
    cnt = 0
    res = ''
    while cnt != n:
      sz = 4096 if cnt < n - 4096 else n - cnt
      r = sock.recv(sz) #os.read(fd, sz)
      cnt += len(r)
      res += r
      if n > 30000:
        sys.stdout.write('D {}/{}B\r'.format(cnt, n))

    if n > 30000:
      sys.stdout.write('\n')

    return json.loads(res)

def show_help():
  print """usage: deslicer_client.py COMMAND [PARAM]
COMMANDS are one of:
  import STLFILE            - import an STL file
  importconfig CFGFILE      - import slic3r ini file
  ping                      - ping server
  list                      - same as listi listc listd sequentially
  listi                     - list imported STLs
  listc                     - list imported configs
  listd                     - list sliced files
  listp                     - list files being worked on
  slice UPLOADEDID [-c CFG] [--nowait | --get]
                            - slice an uploaded STL [and use CFG config file],
                              and optionally dont wait for worker to complete
                              or get results and save as UPLOADEDID.gcode.
                              (--nowait and --get are mutually exclusive)
  get SLICEDID              - downloaded sliced GCode
  stats                     - show server statistics
  journal                   - show log of slicings
  del TYPE ID               - delete file ID of stl | cfg | done TYPE
  wait JOBID                - wait for job JOBID to complete
  """

def run(connect, apikey, args=sys.argv):
  if '-h' in args:
    show_help()
    exit(2)

  if 'import' in args:
    i = args.index('import') + 1
    with open(args[i]) as fin:
      fdata = fin.read()
    data = {'cmd': 'import',
        'data': base64.encodestring(fdata),
        'name': base64.encodestring(args[i])}
  elif 'importconfig' in args:
    i = args.index('importconfig') + 1
    with open(args[i]) as fin:
      fdata = fin.read()
    data = {'cmd': 'importconfig',
        'data': base64.encodestring(fdata),
        'name': base64.encodestring(args[i])}

  elif 'ping' in args:
    data = {'cmd': 'ping', 'c': 0}

  elif 'listi' in args:
    data = {'cmd': 'listimported'}
  elif 'listc' in args:
    data = {'cmd': 'listconfig'}
  elif 'slice' in args:
    i = args.index('slice') + 1
    if '-c' in args[i+1:]:
      cfg = args[i+2]
      data = {'cmd': 'slice', 'id': args[i], 'cfg': cfg}
    else:
      data = {'cmd': 'slice', 'id': args[i]}

  elif 'listd' in args:
    data = {'cmd': 'listdone'}
  elif 'listp' in args:
    data = {'cmd': 'listprogress'}
  elif 'get' in args:
    i = args.index('get') + 1
    data = {'cmd': 'getdone', 'id': args[i]}
  elif 'list' in args:
    print 'STL files already on server'
    run(connect, apikey, args=['listi'])
    print
    print 'Slic3r config files already on server'
    run(connect, apikey, args=['listc'])
    print
    print 'Output GCode'
    run(connect, apikey, args=['listd'])
    print
    print 'In progress'
    run(connect, apikey, args=['listp'])
    return
  elif 'stats' in args:
    data = {'cmd': 'getstats'}
  elif 'journal' in args:
    data = {'cmd': 'journal'}
  elif 'del' in args:
    ti = args.index('del') + 1
    # typ = args[ti] # this is the type: stl, cfg, done
    # idx = args[ti+1] # filename
    data = {'cmd': 'del', 'typ': args[ti], 'idx': args[ti+1]}
  elif 'wait' in args:
    i = args.index('wait') + 1
    data = {'cmd': 'wait', 'jobid': args[i]}
  else:
    print 'unknown command parameters'
    print
    show_help()
    exit(3)

  sock = connect()
  ret = talkto(data, sock, apikey)
  if ret.has_key(u'm'):
    print ret['m']
  if ret.has_key(u'r'):
    if not (ret.has_key(u'm') and (ret['r'] == ret['m'])):
      print ret['r']
  if ret.has_key('files'):
    print 'Response:'
    for f in ret['files']:
      print 'id:', f['id']
      print '    file:', base64.decodestring(f['nm'])
      print '    modified at',
      print time.strftime('%X %x %Z,', time.localtime(float(f['mtime']))),
      print 'size:', f['sz']

  if 'get' in args and ret.has_key(u'data'):
    fdata = base64.decodestring(ret['data'])
    with open(args[i], 'w+') as fin:
      fin.write(fdata)
  if 'stats' in args:
    print 'Total command count:', ret['cnt']
    print 'Total bytes sent:', ret['snt']
    print 'Total bytes received:', ret['rcv']
  if 'journal' in args and ret.has_key('data'):
    for r in ret['data']:
      print r['cmd']
      print '   ', r['action'], 'at', r['timestamp']
      print '    status:', r['status']

  if ret.has_key(u'r'):
    if ret['r'] == 'fail':
      exit(1)

  if 'slice' in args and not '--nowait' in args[i+1:]:
    run(connect, apikey, args=['wait', ret['jobid']])
    if '--get' in args[i+1:]:
      run(connect, apikey, args=['get', args[i]+'.gcode'])

_sock = None
def connect_tpl(HOST, PORT):
  # Create a socket (SOCK_STREAM means a TCP socket)
  global _sock
  if _sock is None:
    sock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
    _sock = ssl.wrap_socket(sock,
      #ca_certs = "/etc/ca_certs_file",
      cert_reqs = ssl.CERT_NONE,
      ssl_version=ssl.PROTOCOL_TLSv1)
    _sock.connect((HOST, int(PORT)))
  return _sock

def connect_close():
  if _sock is None:
    return
  _sock.close()

if __name__=="__main__":
  import ConfigParser
  config = ConfigParser.ConfigParser()
  if len(config.read(os.path.expanduser('~/.deslicer'))) == 0:
    print 'cannot parse ~/.deslicer'
    exit(1)
  hostname = config.get('client', 'server').strip()
  apikey = config.get('client', 'apikey').strip()
  if hostname.startswith('['):
    hi = hostname.index(']')
    hc = hi+hostname[hi:].index(':')
    hsp = hostname[1:hi], hostname[hc+1:]
  else:
    hsp = hostname.split(':')

  if len(hsp) == 1:
    #default port for now
    hsp.append('9999')
  elif len(hsp) > 2:
    hsp = hostname, '9999'

  HOST, PORT = map(lambda x: x.strip(), hsp)
  from functools import partial
  connect = partial(connect_tpl, HOST, PORT)

  try:
    run(connect, apikey)
  finally:
    connect_close()
