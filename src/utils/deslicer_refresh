#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# utility for regenerating merged config
# file generated by merge_configs
#

from __future__ import print_function

import os
import sys
import argparse


SLICER_CONFIGS = '~/.Slic3r'
SUBCONFIGS = ['print', 'filament', 'printer']

SLICER_PATH = os.path.expanduser(SLICER_CONFIGS)


def lookup(*args):
    to_regen = list()

    for num, sub in enumerate(SUBCONFIGS):
        sub_path = os.path.join(SLICER_PATH, sub)
        if not os.path.exists(sub_path):
            sys.stderr.write('Config dir {0} not found\n'.format(sub_path))
            sys.exit(1)

        print('Searching for {0}.ini in {1}'.format(args[num], sub_path))

        for cfg_file in os.listdir(sub_path):
            if cfg_file == args[num] + '.ini':
                print('Found!')
                to_regen.append(os.path.join(sub_path, cfg_file))
                break
        else:
            sys.stderr.write('Not found\n')
            sys.exit(1)

    return to_regen

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('FILE')

    args = parser.parse_args()

    parts = args.FILE.replace('.ini', '').split('∿')
    if len(parts) != 3:
        sys.stderr.write('Unable to parse filename\n')
        sys.exit(1)

    to_merge = lookup(*parts)

    name = '∿'.join(map(lambda x: x.replace('.ini', ''),
                          map(os.path.basename, to_merge)))
    fname = '{0}.ini'.format(name)
    with open(fname, 'w') as out:
        for cfg_path in to_merge:
            out.write("# from {0}\n".format(os.path.basename(cfg_path)))
            with open(cfg_path) as cfg:
                out.write(cfg.read())

    print('Config regenerated')
